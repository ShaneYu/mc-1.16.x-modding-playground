buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}

plugins {
    id 'maven'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'

repositories {
    flatDir {
        name "fileRepo"
        dirs "repo"
    }
    mavenLocal()
    jcenter()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs = ['-Xlint:deprecation']
}

javadoc {
    failOnError = false
}

def versionInfo = getModVersion()
System.out.println(versionInfo)
def version_short = "${versionInfo['version_short']}"

def gpr_credentials = {
    username = property('gpr_username')
    password = property('gpr_token')
}

group = project.mod_group
archivesBaseName = project.gh_repo_name
version = "${versionInfo['version']}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

minecraft {
    mappings channel: project.mcp_channel.toString(), version: project.mcp_version.toString()
//    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'

            // The below if statements are to add args to your gradle.properties file in user home
            // (DO NOT add them directly to the gradle.properties file for this project)
            // Setting the below properties allows use of your normal Minecraft account in the
            // dev environment including having your skin load. Each property also has a comment
            // explaining what information to set the value to/format it expects
            // One thing to note is because of the caching that goes on, after changing these
            // variables, you need to refresh the project and rerun genIntellijRuns/genEclipseRuns
            if (project.hasProperty('mc_uuid')) {
                // Your uuid without any dashes in the middle
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                // Your username/display name, this is the name that shows up in chat
                // Note: This is not your email, even if you have a Mojang account
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_access_token')) {
                // Your access token, you can find it in your '.minecraft/launcher_profiles.json' file
                args '--accessToken', project.getProperty('mc_access_token')
            }

            mods {
                playground {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'

            mods {
                playground {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'

            args '--mod', project.mod_id, '--all',
                    '--existing', file('src/main/resources/').toString(),
                    '--existing', file('src/generated/resources/').toString(),
                    '--output', file('src/generated/resources/')

            mods {
                playground {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    jcenter()
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        // location of the maven that hosts Hwyla files
        url "https://maven.tehnut.info"
    }
    maven {
        name = "WorldStripper"
        url = uri("https://maven.pkg.github.com/ewyboy/world-stripper")
        credentials gpr_credentials
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    // JEI
    if (project.hasProperty("jei_version")) {
        compileOnly fg.deobf("mezz.jei:jei-${project.jei_version}:api")
        runtimeOnly fg.deobf("mezz.jei:jei-${project.jei_version}")
    }

    // Hwyla (Here's what you're looking at)
    if (project.hasProperty("hwyla_version")) {
        compileOnly fg.deobf("mcp.mobius.waila:Hwyla:${project.hwyla_version}:api")
        runtimeOnly fg.deobf("mcp.mobius.waila:Hwyla:${project.hwyla_version}")
    }

    // World Stripper
    if (project.hasProperty('world_stripper_version')) {
        runtimeOnly fg.deobf("com.ewyboy.worldstripper:World-Stripper:${project.world_stripper_version}")
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title": project.mod_name,
                "Specification-Vendor": project.mod_vendor,
                "Specification-Version": "1",
                "Implementation-Title": project.mod_name,
                "Implementation-Version": version_short,
                "Implementation-Vendor" : project.mod_vendor,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

processResources {
    inputs.property 'version', project.version

    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'mod_id': project.mod_id,
                'mod_name': project.mod_name,
                'mod_vendor': project.mod_vendor,
                'mod_version': '${file.jarVersion}',
                'gh_organization': project.gh_organization,
                'gh_repo_name': project.gh_repo_name,
                'minecraft_version_range': project.minecraft_version_range,
                'minecraft_version': project.minecraft_version,
                'javafml_version_range': project.javafml_version_range,
                'forge_version_range': project.forge_version_range
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier.set('sources')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.getDestinationDir()
    archiveClassifier.set('javadoc')
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

//
// GPR/Maven publishing

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/${project.gh_organization}/${project.gh_repo_name}")
            credentials gpr_credentials
        }
    }
    publications {
        //noinspection GroovyAssignabilityCheck
        gpr(MavenPublication) {
            //noinspection GroovyAssignabilityCheck
            from(components.java)
            //noinspection GroovyAssignabilityCheck
            artifact sourcesJar
            //noinspection GroovyAssignabilityCheck
            artifact javadocJar
        }
    }
}

//
// Mod Version Management

def getModVersion() {
    try {
        return getGitVersion()
    } catch (ignored) {
        System.out.println("Git version failed, falling back to gradle.properties")
        return makeVersionMap(project.build_version + '-' + getGitHash())
    }
}

def getGitVersion() {
    def outStream = new ByteArrayOutputStream()
    exec {
        executable = 'git'
        args = ['describe', '--long']
        standardOutput = outStream
    }

    return makeVersionMap(outStream.toString())
}

def getGitHash() {
    def outStream = new ByteArrayOutputStream()
    exec {
        executable = 'git'
        args = ['rev-parse', 'HEAD']
        standardOutput = outStream
    }

    return outStream.toString().trim().substring(0, 6)
}

@SuppressWarnings('GroovyAssignabilityCheck')
def makeVersionMap(version) {
    def matcher = version.trim() =~ /(\d+).(\d+).(\d+)-(.*)/

    def maj = matcher[0][1]
    def min = matcher[0][2]
    def rev = matcher[0][3]
    def bn = getBuildNumber()

    return makeVersionMap(maj, min, rev, bn, matcher[0][4])
}

def makeVersionMap(maj, min, rev, bn, githash) {
    def out = [:]

    out['build.major.number'] = maj.toString()
    out['build.minor.number'] = min.toString()
    out['build.revision.number'] = rev.toString()
    out['build.githash'] = githash
    out['build.number'] = bn.toString()
    out['version_short'] = "${maj}.${min}.${rev}".toString()
    out['version'] = "${project.minecraft_version}-${maj}.${min}.${rev}".toString()

    return out
}

//
// Build number tracking

String getBuildNumber() {
    def versionFile = file('version.properties')

    if (versionFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))

        return versionProps['build_num'].toString()
    }

    return "1"
}

task incrementBuild {
    doFirst {
        def versionFile = file('version.properties')

        if (versionFile.canRead()) {
            Properties versionProps = new Properties()
            versionProps.load(new FileInputStream(versionFile))
            def num = versionProps['build_num'].toInteger() + 1
            println("incrementing BuildNumber to: " + num)
            versionProps['build_num'] = num.toString()
            versionProps.store(versionFile.newWriter(), null)
        } else {
            println("version.properties file not found! Ignoring.")
        }
    }
}

build.finalizedBy incrementBuild // only increment on successful builds

//
// Update JSON management

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

def writeUpdateJson() {
    def version = getModVersion()['version_short']
    def slurper = new JsonSlurper()
    def file = project.file('update.json')
    def json = slurper.parse(file)

    if (!json[project.minecraft_version].containsKey(version.toString()))
        json[project.minecraft_version][version.toString()] = "https://github.com/${project.gh_organization}/${project.gh_repo_name}/blob/1.16.x/CHANGELOG.md"

    json[project.minecraft_version] = json[project.minecraft_version].sort([compare: { a, b -> b.compareTo(a) }] as Comparator)
    json['promos']["${project.minecraft_version}-latest"] = version
    json['promos']["${project.minecraft_version}-recommended"] = version

    println(json)
    file.write(JsonOutput.prettyPrint(JsonOutput.toJson(json)))
}

task createUpdateJson {
    doLast {
        println('Updating update.json...')
        writeUpdateJson()
    }
}

//build.finalizedBy createUpdateJson